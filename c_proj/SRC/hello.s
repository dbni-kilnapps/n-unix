;
; File generated by cc65 v 2.19 - Git 16258d812
;
	.fopt		compiler,"cc65 v 2.19 - Git 16258d812"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.export		_i
	.export		_text
	.export		_palette
	.export		_inDebug
	.export		_debug
	.export		_put_str
	.export		_main

.segment	"DATA"

_inDebug:
	.byte	$00

.segment	"RODATA"

_text:
	.byte	$48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$21,$00
_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

_i:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ debug (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ put_str (unsigned int adr, const char *str)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if (!*str)
;
L0002:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
;
; break;
;
	beq     L0003
;
; vram_put((*str++) - 0x20); //-0x20 because ASCII code 0x20 is placed in tile 0 of the CHR
;
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	sec
	sbc     #$20
	pha
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	pla
	jsr     _vram_put
;
; while (1)
;
	jmp     L0002
;
; }
;
L0003:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; counter = 0;
;
	jsr     decsp2
	ldy     #$00
	tya
	sta     (sp),y
	iny
	sta     (sp),y
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette); // load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(10, 14)); // screen is 32 x 30 tiles
;
	ldx     #$21
	lda     #$CA
	jsr     _vram_adr
;
; vram_write(text, sizeof(text)); // this pushes a whole string to the screen
;
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$0D
	jsr     _vram_write
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; counter++;
;
L0007:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
;
; if (counter == 10000)
;
	ldy     #$01
	lda     (sp),y
	cmp     #$27
	bne     L0007
	dey
	lda     (sp),y
	cmp     #$10
	bne     L0007
;
; inDebug = 1;
;
	ldx     #$00
	lda     #$01
	sta     _inDebug
;
; debug();
;
	jsr     _debug
;
; while (1)
;
	jmp     L0007

.endproc

